<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-24T09:06:57-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Anderson Marzola - System Architect</title><subtitle>In this blog, my goal is more than just sharing technical knowledge. I want to create an environment for learning and exchanging experiences, covering everything from practical tips and tutorials to discussions about software architecture and technological trends.</subtitle><entry><title type="html">Developing a CRUD API for Products with ASP.NET Core</title><link href="http://localhost:4000/webapi,/.net,/c%23,/sql/server/2024/11/24/developing-a-crud-api-for-products-with-aspnetcore.html" rel="alternate" type="text/html" title="Developing a CRUD API for Products with ASP.NET Core" /><published>2024-11-24T08:30:57-03:00</published><updated>2024-11-24T08:30:57-03:00</updated><id>http://localhost:4000/webapi,/.net,/c%23,/sql/server/2024/11/24/developing-a-crud-api-for-products-with-aspnetcore</id><content type="html" xml:base="http://localhost:4000/webapi,/.net,/c%23,/sql/server/2024/11/24/developing-a-crud-api-for-products-with-aspnetcore.html"><![CDATA[<p>#Developing a CRUD API for Products with ASP.NET Core: Lessons Learned, Common Errors, and Solutions</p>

<p>Building a CRUD API for managing products is a fundamental exercise in ASP.NET Core development. While it may seem straightforward, this process reveals technical challenges that test our ability to handle real-world development cycles. In this article, we will review the API development process, highlight common errors and their solutions, and provide suggestions for future improvements.</p>

<hr />

<h2 id="project-overview"><strong>Project Overview</strong></h2>

<p>We developed an API to manage a product catalog. The API supports CRUD (Create, Read, Update, Delete) operations and was implemented with the following technologies:</p>

<ul>
  <li><strong>ASP.NET Core 8.0</strong> for API development.</li>
  <li><strong>Entity Framework Core</strong> for database interaction.</li>
  <li><strong>MS SQL Server</strong> as the relational database.</li>
  <li><strong>Docker and Docker Compose</strong> to containerize and manage infrastructure.</li>
  <li><strong>xUnit</strong> for automated testing.</li>
  <li><strong>Swagger</strong> for API documentation and interaction.</li>
</ul>

<p>The application was configured to run both locally and inside Docker containers, ensuring flexibility.</p>

<hr />

<h2 id="common-errors-and-their-solutions"><strong>Common Errors and Their Solutions</strong></h2>

<h3 id="1-error-the-instance-of-entity-type-product-cannot-be-tracked"><strong>1. Error: <code class="language-plaintext highlighter-rouge">The instance of entity type 'Product' cannot be tracked</code></strong></h3>

<p><strong>Problem:</strong>
During updates with EF Core, this error occurred because two instances of the same object were being tracked in the same context.</p>

<p><strong>Solution:</strong><br />
We used the <code class="language-plaintext highlighter-rouge">AsNoTracking()</code> method for queries where tracking was unnecessary. For updates, we ensured only one instance of the entity was used:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">existingProduct</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_dbContext</span><span class="p">.</span><span class="n">Products</span><span class="p">.</span><span class="nf">AsNoTracking</span><span class="p">().</span><span class="nf">FirstOrDefaultAsync</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">existingProduct</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_dbContext</span><span class="p">.</span><span class="nf">Entry</span><span class="p">(</span><span class="n">product</span><span class="p">).</span><span class="n">State</span> <span class="p">=</span> <span class="n">EntityState</span><span class="p">.</span><span class="n">Modified</span><span class="p">;</span>
    <span class="k">await</span> <span class="n">_dbContext</span><span class="p">.</span><span class="nf">SaveChangesAsync</span><span class="p">();</span>
<span class="p">}</span><span class="err">```</span>

<span class="p">---</span>

<span class="err">###</span> <span class="p">**</span><span class="m">2</span><span class="p">.</span> <span class="n">Docker</span> <span class="n">Container</span> <span class="k">for</span> <span class="n">MS</span> <span class="n">SQL</span> <span class="n">Server</span> <span class="n">Stops</span> <span class="n">Unexpectedly</span><span class="p">**</span>

<span class="p">**</span><span class="n">Problem</span><span class="p">:**</span>
<span class="n">The</span> <span class="n">catalogdb</span> <span class="n">container</span> <span class="n">stopped</span> <span class="n">running</span> <span class="k">and</span> <span class="n">showed</span> <span class="n">an</span> <span class="s">"exited"</span> <span class="n">status</span> <span class="n">shortly</span> <span class="n">after</span> <span class="n">starting</span><span class="p">.</span>

<span class="p">**</span><span class="n">Solution</span><span class="p">:**</span>  
<span class="n">We</span> <span class="k">checked</span> <span class="n">the</span> <span class="n">container</span> <span class="n">logs</span> <span class="k">using</span> <span class="nn">docker</span> <span class="n">logs</span> <span class="p">&lt;</span><span class="n">container_id</span><span class="p">&gt;</span> <span class="n">to</span> <span class="n">identify</span> <span class="n">the</span> <span class="n">root</span> <span class="n">cause</span><span class="p">.</span>
<span class="n">We</span> <span class="k">fixed</span> <span class="n">the</span> <span class="n">issue</span> <span class="k">by</span> <span class="n">adding</span> <span class="n">the</span> <span class="n">MSSQL_PID</span><span class="p">=</span><span class="n">Express</span> <span class="n">environment</span> <span class="n">variable</span> <span class="k">in</span> <span class="n">the</span> <span class="n">docker</span><span class="p">-</span><span class="n">compose</span><span class="p">.</span><span class="n">yml</span> <span class="n">file</span> <span class="n">to</span> <span class="n">specify</span> <span class="n">the</span> <span class="n">license</span> <span class="n">type</span><span class="p">:</span>

<span class="err">```</span><span class="n">yaml</span>
<span class="n">db</span><span class="p">:</span>
  <span class="n">image</span><span class="p">:</span> <span class="n">mcr</span><span class="p">.</span><span class="n">microsoft</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">mssql</span><span class="p">/</span><span class="n">server</span><span class="p">:</span><span class="m">2019</span><span class="p">-</span><span class="n">latest</span>
  <span class="n">environment</span><span class="p">:</span>
    <span class="n">SA_PASSWORD</span><span class="p">:</span> <span class="s">"masterkey"</span>
    <span class="n">ACCEPT_EULA</span><span class="p">:</span> <span class="s">"Y"</span>
    <span class="n">MSSQL_PID</span><span class="p">:</span> <span class="s">"Express"</span>
</code></pre></div></div>

<hr />

<h3 id="3-error-mapping-the-sa-user-to-the-database"><strong>3. Error Mapping the sa User to the Database</strong></h3>

<p><strong>Problem:</strong>
The error Cannot use the special principal ‘sa’ occurred while mapping the sa user to the CatalogDb database.</p>

<p><strong>Solution:</strong>
We configured SQL Server to allow SQL authentication logins.
We created a new login and mapped it to the database with appropriate permissions:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="n">LOGIN</span> <span class="n">cataloguser</span> <span class="k">WITH</span> <span class="n">PASSWORD</span> <span class="o">=</span> <span class="s1">'securePassword'</span><span class="p">;</span>
<span class="n">USE</span> <span class="n">CatalogDb</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">USER</span> <span class="n">cataloguser</span> <span class="k">FOR</span> <span class="n">LOGIN</span> <span class="n">cataloguser</span><span class="p">;</span>
<span class="k">EXEC</span> <span class="n">sp_addrolemember</span> <span class="s1">'db_owner'</span><span class="p">,</span> <span class="s1">'cataloguser'</span><span class="p">;</span>
</code></pre></div></div>

<hr />

<h3 id="4-failing-test-assertnotempty"><strong>4. Failing Test: Assert.NotEmpty()</strong></h3>

<p><strong>Problem:</strong>
A test checking if the containers were “running” returned an empty result.</p>

<p><strong>Solution:</strong>
We ensured the containers were correctly configured and running.
We updated the tests to use the Docker.DotNet library and validated container logs for additional insights.</p>

<hr />

<h2 id="technologies-well-employed"><strong>Technologies Well Employed</strong></h2>

<p><strong>1. ASP.NET Core and EF Core:</strong>
EF Core simplified database interactions, and ASP.NET Core provided a robust framework for API development.</p>

<p><strong>2. Docker:</strong>
Containerizing the application and database ensured a consistent environment for development and testing.</p>

<p><strong>3. Swagger:</strong>
Automatically documented the API, making it accessible for developers and integrators.</p>

<p><strong>4. xUnit and Automated Tests:</strong>
Tests ensured code quality and helped detect regressions.</p>

<hr />

<h2 id="suggestions-for-future-versions"><strong>Suggestions for Future Versions</strong></h2>

<p><strong>1. Authentication and Authorization:</strong>
Implement JWT-based authentication to secure the endpoints.</p>

<p><strong>2. Monitoring:</strong>
Integrate tools like Application Insights or Prometheus/Grafana for performance monitoring.</p>

<p><strong>3. Data Validation:</strong>
Enhance input validation using the FluentValidation library.</p>

<p><strong>4. Integration Testing:</strong>
Expand tests to cover complex scenarios and interactions with the database inside containers.</p>

<p><strong>5. CI/CD:</strong>
Set up a continuous integration and deployment pipeline with GitHub Actions or Azure DevOps.</p>

<hr />

<h2 id="conclusion"><strong>Conclusion</strong></h2>

<p>Developing the CRUD API for products was a valuable learning opportunity. Despite the challenges, we overcame obstacles through systematic debugging and the right tools. These lessons have prepared us for future projects that require greater robustness and scalability.</p>

<p>If you’re starting a similar project, remember to document technical decisions, create tests for each feature, and use containers to isolate environments. This approach will ensure success and agility in your development process.</p>

<p>Ready to build your API? Good luck! 🎯</p>

<hr />

<p><img src="https://avatars.githubusercontent.com/u/8000175?s=400&amp;v=4" alt="Anderson Marzola" width="128" height="128" style="border-radius: 50%;" /></p>

<p><strong>Anderson Marzola</strong></p>

<p>I’m a developer with over 10 years of experience, an expert in <strong>.NET</strong> and <strong>SQL Server</strong>, passionate about technology, innovation and knowledge sharing. In this blog, I share tips, tutorials and insights from the world of programming to help other developers grow.</p>

<p>💡 Let’s connect?</p>
<ul>
  <li>💼 <a href="https://linkedin.com/in/ajmarzola">My LinkedIn</a></li>
  <li>💻 <a href="https://github.com/ajmarzola">My GitHub</a></li>
  <li>✉️ <a href="mailto:ajmarzola@gmail.com">Get in touch</a></li>
</ul>]]></content><author><name></name></author><category term="webapi," /><category term=".net," /><category term="c#," /><category term="sql" /><category term="server" /><summary type="html"><![CDATA[#Developing a CRUD API for Products with ASP.NET Core: Lessons Learned, Common Errors, and Solutions]]></summary></entry><entry><title type="html">Hello, World!</title><link href="http://localhost:4000/jekyll/update/2024/11/23/hello-word.html" rel="alternate" type="text/html" title="Hello, World!" /><published>2024-11-23T12:14:14-03:00</published><updated>2024-11-23T12:14:14-03:00</updated><id>http://localhost:4000/jekyll/update/2024/11/23/hello-word</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/23/hello-word.html"><![CDATA[<p>#Welcome to my tech space!</p>

<p>I’ve been a professional developer since 2010, with an unwavering passion for technology and innovation. My expertise lies in the <strong>.NET</strong> platform and <strong>SQL Server</strong>, but my path has also led me to explore other tools and languages, such as <strong>Angular</strong>, <strong>React</strong>, <strong>Java</strong>, <strong>Python</strong>, and even <strong>Delphi</strong>. With over a decade of experience, I’ve developed a keen eye for <strong>data modeling</strong> and <strong>robust solutions</strong>, aligned with the best practices in the market.</p>

<p>My goal in this blog is more than just sharing technical knowledge. I want to create an environment for learning and exchanging experiences, covering everything from practical tips and tutorials to discussions about software architecture and technology trends.</p>

<p>Whether you’re a developer, an enthusiast, or simply curious about programming, you’ll find valuable insights, practical examples, and, I hope, lots of inspiration for your own projects here:</p>

<ul>
  <li><strong>Valuable insights</strong> on development and technology;</li>
  <li><strong>Practical examples</strong> to apply in everyday life;</li>
  <li>And, I hope, <strong>inspiration</strong> for your own projects.</li>
</ul>

<p>Let’s build something amazing together? 🚀</p>

<hr />

<p><img src="https://avatars.githubusercontent.com/u/8000175?s=400&amp;v=4" alt="Anderson Marzola" width="128" height="128" style="border-radius: 50%;" /></p>

<p><strong>Anderson Marzola</strong></p>

<p>I’m a developer with over 10 years of experience, an expert in <strong>.NET</strong> and <strong>SQL Server</strong>, passionate about technology, innovation and knowledge sharing. In this blog, I share tips, tutorials and insights from the world of programming to help other developers grow.</p>

<p>💡 Let’s connect?</p>
<ul>
  <li>💼 <a href="https://linkedin.com/in/ajmarzola">My LinkedIn</a></li>
  <li>💻 <a href="https://github.com/ajmarzola">My GitHub</a></li>
  <li>✉️ <a href="mailto:ajmarzola@gmail.com">Get in touch</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[#Welcome to my tech space!]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/11/22/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-11-22T22:14:14-03:00</published><updated>2024-11-22T22:14:14-03:00</updated><id>http://localhost:4000/jekyll/update/2024/11/22/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/22/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>